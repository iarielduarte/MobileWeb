<!DOCTYPE html>
<html manifest="notas.manifest"><head><meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
<title>Crear y almacenar notas</title>
<script src="/path/to/jquery.js" type="text/javascript"></script>
<script src="/path/to/jquery.ui.draggable.js" type="text/javascript"></script>

<script src="/path/to/jquery.alerts.js" type="text/javascript"></script>
<link href="/path/to/jquery.alerts.css" rel="stylesheet" type="text/css" media="screen" />
<style>
body {
    font-family: 'Lucida Grande', 'Helvetica', sans-serif;
}

.nota {
    background-color: rgb(255, 240, 70);
    height: 250px;
    padding: 10px;
    position: absolute;
    width: 200px;
    -webkit-box-shadow: 0px 5px 10px rgba(0, 0, 0, 0.5);
}

.nota:hover .botoncerrar {
    display: block;
}

.botoncerrar {
    display: none;
    background-image: url(botonBorrar.png);
    height: 30px;
    position: absolute;
    left: -15px;
    top: -15px;
    width: 30px;
}

.botoncerrar:active {
    background-image: url(botonBorrarPulsado.png);
}

.edit {
    outline: none;
}

.timestamp {
    position: absolute;
    left: 0px;
    right: 0px;
    bottom: 0px;
    font-size: 9px;
    background-color: #db0;
    color: white;
    border-top: 1px solid #a80;
    padding: 2px 4px;
    text-align: right;
}
</style>

<script>
var db = null;

try {
    if (window.openDatabase) {
        db = openDatabase("NotaTest", "1.0", "Ejemplo uso de la Database API de HTML5", 200000);
        if (!db)
            alert("No se ha podido abrir la base de datos en el disco. Esto es probablemente porque la versión no era la correcta o no queda suficiente espacio en la cuota asignada al dominio");
    } else
        alert("No se ha podido abrir la base de datos. Por favor prueba con un WebKit nightly con esta característica habilitada");
} catch(err) {
    db = null;
    alert("No se ha podido abrir la base de datos.  Por favor prueba con un WebKit nightly con esta característica habilitada");
}

var captured = null;
var highestZ = 0;
var highestId = 0;

function Nota()
{
    var self = this;

    var nota = document.createElement('div');
    nota.className = 'nota';
    nota.addEventListener('mousedown', function(e) { return self.onMouseDown(e) }, false);
    nota.addEventListener('click', function() { return self.onNoteClick() }, false);
    this.nota = nota;

    var close = document.createElement('div');
    close.className = 'botoncerrar';
    close.addEventListener('click', function(event) { return self.close(event) }, false);
    nota.appendChild(close);

    var edit = document.createElement('div');
    edit.className = 'edit';
    edit.setAttribute('contenteditable', true);
    edit.addEventListener('keyup', function() { return self.onKeyUp() }, false);
    nota.appendChild(edit);
    this.editField = edit;

    var ts = document.createElement('div');
    ts.className = 'timestamp';
    ts.addEventListener('mousedown', function(e) { return self.onMouseDown(e) }, false);
    nota.appendChild(ts);
    this.lastModified = ts;

    document.body.appendChild(nota);
    return this;
}

Nota.prototype = {
    get id()
    {
        if (!("_id" in this))
            this._id = 0;
        return this._id;
    },

    set id(x)
    {
        this._id = x;
    },

    get text()
    {
        return this.editField.innerHTML;
    },

    set text(x)
    {
        this.editField.innerHTML = x;
    },

    get timestamp()
    {
        if (!("_timestamp" in this))
            this._timestamp = 0;
        return this._timestamp;
    },

    set timestamp(x)
    {
        if (this._timestamp == x)
            return;

        this._timestamp = x;
        var date = new Date();
        date.setTime(parseFloat(x));
        this.lastModified.textContent = modifiedString(date);
    },

    get left()
    {
        return this.nota.style.left;
    },

    set left(x)
    {
        this.nota.style.left = x;
    },

    get top()
    {
        return this.nota.style.top;
    },

    set top(x)
    {
        this.nota.style.top = x;
    },

    get zIndex()
    {
        return this.nota.style.zIndex;
    },

    set zIndex(x)
    {
        this.nota.style.zIndex = x;
    },

    close: function(event)
    {
	
	
	jAlert('Mensaje con JQUERY', 'Alert Dialog');
	
	    this.cancelPendingSave();

        var nota = this;
        db.transaction(function(tx)
        {
            tx.executeSql("DELETE FROM NotasPostit WHERE id = ?", [nota.id]);
        });
        
        var duration = event.shiftKey ? 2 : .25;
        this.nota.style.webkitTransition = '-webkit-transform ' + duration + 's ease-in, opacity ' + duration + 's ease-in';
        this.nota.offsetTop; // Force style recalc
        this.nota.style.webkitTransformOrigin = "0 0";
        this.nota.style.webkitTransform = 'skew(30deg, 0deg) scale(0)';
        this.nota.style.opacity = '0';

        var self = this;
        setTimeout(function() { document.body.removeChild(self.nota) }, duration * 1000);
    },

    saveSoon: function()
    {
        this.cancelPendingSave();
        var self = this;
        this._saveTimer = setTimeout(function() { self.save() }, 200);
    },

    cancelPendingSave: function()
    {
        if (!("_saveTimer" in this))
            return;
        clearTimeout(this._saveTimer);
        delete this._saveTimer;
    },

    save: function()
    {
        this.cancelPendingSave();

        if ("dirty" in this) {
            this.timestamp = new Date().getTime();
            delete this.dirty;
        }

        var nota = this;
        db.transaction(function (tx)
        {
            tx.executeSql("UPDATE NotasPostit SET nota = ?, timestamp = ?, left = ?, top = ?, zindex = ? WHERE id = ?", [nota.text, nota.timestamp, nota.left, nota.top, nota.zIndex, nota.id]);
        });
    },

    saveAsNew: function()
    {
        this.timestamp = new Date().getTime();
        
        var nota = this;
        db.transaction(function (tx) 
        {
            tx.executeSql("INSERT INTO NotasPostit (id, nota, timestamp, left, top, zindex) VALUES (?, ?, ?, ?, ?, ?)", [nota.id, nota.text, nota.timestamp, nota.left, nota.top, nota.zIndex]);
        }); 
    },

    onMouseDown: function(e)
    {
        captured = this;
        this.startX = e.clientX - this.nota.offsetLeft;
        this.startY = e.clientY - this.nota.offsetTop;
        this.zIndex = ++highestZ;

        var self = this;
        if (!("mouseMoveHandler" in this)) {
            this.mouseMoveHandler = function(e) { return self.onMouseMove(e) }
            this.mouseUpHandler = function(e) { return self.onMouseUp(e) }
        }

        document.addEventListener('mousemove', this.mouseMoveHandler, true);
        document.addEventListener('mouseup', this.mouseUpHandler, true);

        return false;
    },

    onMouseMove: function(e)
    {
        if (this != captured)
            return true;

        this.left = e.clientX - this.startX + 'px';
        this.top = e.clientY - this.startY + 'px';
        return false;
    },

    onMouseUp: function(e)
    {
        document.removeEventListener('mousemove', this.mouseMoveHandler, true);
        document.removeEventListener('mouseup', this.mouseUpHandler, true);

        this.save();
        return false;
    },

    onNoteClick: function(e)
    {
        this.editField.focus();
        getSelection().collapseToEnd();
    },

    onKeyUp: function()
    {
        this.dirty = true;
        this.saveSoon();
    },
}

function loaded()
{
    db.transaction(function(tx) {
        tx.executeSql("SELECT COUNT(*) FROM NotasPostit", [], function(result) {
            loadNotas();
        }, function(tx, error) {
            tx.executeSql("CREATE TABLE NotasPostit (id REAL UNIQUE, nota TEXT, timestamp REAL, left TEXT, top TEXT, zindex REAL)", [], function(result) { 
                loadNotas(); 
            });
        });
    });
}

function loadNotas()
{
    db.transaction(function(tx) {
        tx.executeSql("SELECT id, nota, timestamp, left, top, zindex FROM NotasPostit", [], function(tx, result) {
            for (var i = 0; i < result.rows.length; ++i) {
                var row = result.rows.item(i);
                var nota = new Nota();
                nota.id = row['id'];
                nota.text = row['nota'];
                nota.timestamp = row['timestamp'];
                nota.left = row['left'];
                nota.top = row['top'];
                nota.zIndex = row['zindex'];

                if (row['id'] > highestId)
                    highestId = row['id'];
                if (row['zindex'] > highestZ)
                    highestZ = row['zindex'];
            }

            if (!result.rows.length)
                nuevaNota();
        }, function(tx, error) {
            alert('Failed to retrieve notas from database - ' + error.message);
            return;
        });
    });
}

function modifiedString(date)
{
    return 'Última Modificación: ' + date.getDate() + '-' + (date.getMonth() + 1) + '-' + date.getFullYear() + ' ' + date.getHours() + ':' + date.getMinutes() + ':' + date.getSeconds();
}

function nuevaNota()
{
    var nota = new Nota();
    nota.id = ++highestId;
    nota.timestamp = new Date().getTime();
    nota.left = Math.round(Math.random() * 400) + 'px';
    nota.top = Math.round(Math.random() * 500) + 'px';
    nota.zIndex = ++highestZ;
    nota.saveAsNew();
}

if (db != null)
    addEventListener('load', loaded, false);
</script>
</head>
<body>
<p>Esta p&aacute;gina muestra el uso de la <a href="http://www.whatwg.org/specs/web-apps/current-work/multipage/section-sql.html">API Client-side Database Storage de HTML 5</a>. Todas las notas que creemos ser&aacute;n salvadas en una base de datos en nuestro disco duro local, y ser&aacute; recargado desde esa base de datos la pr&oacute;xima vez que visitemos esta p&aacute;gina. Para probarlo, usamos <a href="http://nightly.webkit.org/">WebKit Nightly Build</a>.</p>
<button id="nuevoBotonNota" onclick="nuevaNota()">Nueva Nota</button>
<script>
document.getElementById("nuevoBotonNota").disabled = !db;
</script><sfmsg id="sfMsgId" data="{&quot;imageCount&quot;:0,&quot;ip&quot;:&quot;83.35.209.37&quot;}"></sfmsg></body></html>